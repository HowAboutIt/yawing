###############################################################################
#                                                                             #
#                                                       15/May/2009  07:34:01 #
# IAR C/C++ Compiler V4.20.1.20017/W32, Evaluation edition for MSP430         #
# Copyright 1996-2008 IAR Systems AB.                                         #
# Time limited license: 25 days left                                          #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  D:\workbench\yawing\Projects\Examples\Applications\main #
#                     _LinkListen.c                                           #
#    Command line  =  -f D:\workbench\yawing\Projects\Examples\eZ430RF\Simple #
#                     _Peer_to_Peer\IAR\Configuration\End_Device\smpl_config. #
#                     dat (-DNUM_CONNECTIONS=2 -DSIZE_INFRAME_Q=2             #
#                     -DSIZE_OUTFRAME_Q=2 "-DTHIS_DEVICE_ADDRESS={0x79,       #
#                     0x56, 0x34, 0x12}" -DEND_DEVICE) -f                     #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\Configuration\smpl_nwk_config.dat        #
#                     (-DMAX_HOPS=3 -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=9  #
#                     -DMAX_APP_PAYLOAD=10 -DDEFAULT_LINK_TOKEN=0x01020304    #
#                     -DDEFAULT_JOIN_TOKEN=0x05060708 -DxFREQUENCY_AGILITY    #
#                     -DxAPP_AUTO_ACK -DxEXTENDED_API -DxSMPL_SECURE          #
#                     -DxNVOBJECT_SUPPORT -DSW_TIMER)                         #
#                     D:\workbench\yawing\Projects\Examples\Applications\main #
#                     _LinkListen.c -D MRFI_CC2500 -lcN                       #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkListen\List\ -o               #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkListen\Obj\                   #
#                     --require_prototypes --debug -D__MSP430F2274__ -e       #
#                     --double=32 -I D:\workbench\yawing\Projects\Examples\eZ #
#                     430RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components #
#                     \bsp\ -I D:\workbench\yawing\Projects\Examples\eZ430RF\ #
#                     Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\bsp\d #
#                     rivers\ -I D:\workbench\yawing\Projects\Examples\eZ430R #
#                     F\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\bsp #
#                     \boards\EZ430RF\ -I D:\workbench\yawing\Projects\Exampl #
#                     es\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Compo #
#                     nents\mrfi\ -I D:\workbench\yawing\Projects\Examples\eZ #
#                     430RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components #
#                     \SimpliciTI\nwk\ -I D:\workbench\yawing\Projects\Exampl #
#                     es\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Compo #
#                     nents\SimpliciTI\nwk_applications\ -I "C:\Program       #
#                     Files\IAR Systems\Embedded Workbench 5.3                #
#                     Evaluation\430\INC\" -I "C:\Program Files\IAR           #
#                     Systems\Embedded Workbench 5.3                          #
#                     Evaluation\430\INC\CLIB\" -Ohz                          #
#    List file     =  D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkListen\List\main_LinkListen.l #
#                     st                                                      #
#    Object file   =  D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkListen\Obj\main_LinkListen.r4 #
#                     3                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\workbench\yawing\Projects\Examples\Applications\main_LinkListen.c
      1          /*----------------------------------------------------------------------------
      2           *  Demo Application for SimpliciTI
      3           *
      4           *  L. Friedman
      5           *  Texas Instruments, Inc.
      6           *----------------------------------------------------------------------------
      7           */
      8          /******************************************************************************************
      9          
     10            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     13            the terms of a software license agreement between the user who downloaded the software,
     14            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     15            "License"). You may not use this Software unless you agree to abide by the terms of the
     16            License. The License limits your use, and you acknowledge, that the Software may not be
     17            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     19            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     20            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     21            perform, display or sell this Software and/or its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
     24            WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     25            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     26            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     27            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     28            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     29            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     30            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     31            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     32          
     33            Should you have any questions regarding your right to use this Software,
     34            contact Texas Instruments Incorporated at www.TI.com.
     35          **************************************************************************************************/
     36          
     37          #include "bsp.h"
     38          #include "mrfi.h"
     39          #include "nwk_types.h"
     40          #include "nwk_api.h"
     41          #include "bsp_leds.h"
     42          #include "bsp_buttons.h"
     43          
     44          #include "app_remap_led.h"
     45          
     46          #define	GREEN	1
     47          #define RED		2
     48          #define	BSP_GREEN_LED_IS_ON	BSP_LED1_IS_ON
     49          #define	BSP_RED_LED_IS_ON	BSP_LED2_IS_ON
     50          #define	BSP_BUTTON 			BSP_BUTTON1
     51          
     52          #define	I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE
     53          
     54          static void linkFrom(void);
     55          
     56          void toggleLED(uint8_t);
     57          
     58          static          uint8_t  sRxTid = 0;
     59          static          linkID_t sLinkID2 = 0;
     60          static volatile uint8_t  sSemaphore = 0;
     61          
     62          /* Rx callback handler */
     63          static uint8_t sRxCallback(linkID_t);
     64          
     65          void main (void)
     66          {
     67            BSP_Init();
     68          
     69            /* If an on-the-fly device address is generated it must be done before the
     70             * call to SMPL_Init(). If the address is set here the ROM value will not
     71             * be used. If SMPL_Init() runs before this IOCTL is used the IOCTL call
     72             * will not take effect. One shot only. The IOCTL call below is conformal.
     73             */
     74          #ifdef I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE
     75            {
     76              addr_t lAddr;
     77          	lAddr.addr[0]=0x35;
     78          	lAddr.addr[1]=0x35;
     79          	lAddr.addr[2]=0x35;
     80          	lAddr.addr[3]=0x35;
     81          
     82              //createRandomAddress(&lAddr);
     83              SMPL_Ioctl(IOCTL_OBJ_ADDR, IOCTL_ACT_SET, &lAddr);
     84            }
     85          #endif /* I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE */
     86          
     87            /* This call will fail because the join will fail since there is no Access Point
     88             * in this scenario. But we don't care -- just use the default link token later.
     89             * We supply a callback pointer to handle the message returned by the peer.
     90             */
     91            SMPL_Init(sRxCallback);
     92          
     93            /* turn on LEDs. */
     94            if (!BSP_RED_LED_IS_ON())
     95            {
     96              toggleLED(RED);
     97            }
     98            if (!BSP_GREEN_LED_IS_ON())
     99            {
    100              toggleLED(GREEN);
    101            }
    102          
    103            /* wait for a button press... */
    104            do {
    105              if (BSP_BUTTON() )
    106              {
    107                break;
    108              }
    109            } while (1);
    110          
    111            /* never coming back... */
    112            linkFrom();
    113          
    114            /* but in case we do... */
    115            while (1) ;
    116          }
    117          
    118          static void linkFrom()
    119          {
    120            uint8_t     msg[2], tid = 0;
    121          
    122            /* Turn off one LED so we can tell the device is now listening.
    123             * Received messages will toggle the other LED.
    124             */
    125          	  if (BSP_RED_LED_IS_ON())
    126          	  {
    127          		toggleLED(RED);
    128          	  }
    129          
    130             /* listen for link forever... */
    131            while (1)
    132            {
    133              if (SMPL_SUCCESS == SMPL_LinkListen(&sLinkID2))
    134              {
    135                break;
    136              }
    137              /* Implement fail-to-link policy here. otherwise, listen again. */
    138            }
    139            if (!BSP_RED_LED_IS_ON())
    140            {
    141              toggleLED(RED);
    142            }
    143             /* turn on LED1 on the peer in response to receiving a frame. */
    144             *msg = 0x01;
    145          
    146             /* turn on RX. default is RX off. */
    147             SMPL_Ioctl( IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_RXON, 0);
    148          
    149             while (1)
    150             {
    151               /* Wait for a frame to be received. The Rx handler, which is running in
    152                * ISR thread, will post to this semaphore allowing the application to
    153                * send the reply message in the user thread.
    154                */
    155               if (sSemaphore)
    156               {
    157                 *(msg+1) = ++tid;
    158                 SMPL_Send(sLinkID2, msg, 2);
    159          
    160                 /* Reset semaphore. This is not properly protected and there is a race
    161                  * here. In theory we could miss a message. Good enough for a demo, though.
    162                  */
    163                 sSemaphore = 0;
    164               }
    165             }
    166          }
    167          
    168          void toggleLED(uint8_t which)
    169          {
    170            if (1 == which)
    171            {
    172              BSP_TOGGLE_LED1();
    173            }
    174            else if (2 == which)
    175            {
    176              BSP_TOGGLE_LED2();
    177            }
    178            return;
    179          }
    180          
    181          /* handle received messages */
    182          static uint8_t sRxCallback(linkID_t port)
    183          {
    184            uint8_t msg[2], len, tid;
    185          
    186            /* is the callback for the link ID we want to handle? */
    187            if (port == sLinkID2)
    188            {
    189              /* yes. go get the frame. we know this call will succeed. */
    190               if ((SMPL_SUCCESS == SMPL_Receive(sLinkID2, msg, &len)) && len)
    191               {
    192                 /* Check the application sequence number to detect
    193                  * late or missing frames...
    194                  */
    195                 tid = *(msg+1);
    196                 if (tid)
    197                 {
    198                   if (tid > sRxTid)
    199                   {
    200                     /* we're good. toggle LED */
    201                     toggleLED(*msg);
    202                     sRxTid = tid;
    203                   }
    204                 }
    205                 else
    206                 {
    207                   /* wrap case... */
    208                   if (sRxTid)
    209                   {
    210                     /* we're good. toggle LED */
    211                     toggleLED(*msg);
    212                     sRxTid = tid;
    213                   }
    214                 }
    215                 /* Post to the semaphore to let application know so it sends
    216                  * the reply
    217                  */
    218                 sSemaphore = 1;
    219                 /* drop frame. we're done with it. */
    220                 return 1;
    221               }
    222            }
    223            /* keep frame for later handling */
    224            return 0;
    225          }
    226          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     linkFrom                 6
       -> toggleLED           6
       -> SMPL_LinkListen     6
       -> toggleLED           6
       -> SMPL_Ioctl          6
       -> SMPL_Send           6
     main                     6
       -> BSP_Init            6
       -> SMPL_Ioctl          6
       -> SMPL_Init           6
       -> toggleLED           6
       -> toggleLED           6
       -> linkFrom            6
     sRxCallback              6
       -> SMPL_Receive        6
       -> toggleLED           6
       -> toggleLED           6
     toggleLED                2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     P1IN              1
     P1OUT             1
     sRxTid            1
     sLinkID2          1
     sSemaphore        1
     main             74
     ?Subroutine0     14
     linkFrom         80
     toggleLED        20
     sRxCallback      92

 
 280 bytes in segment CODE
   2 bytes in segment DATA16_AN
   3 bytes in segment DATA16_Z
 
 280 bytes of CODE memory
   3 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
