//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     11/Dec/2008  18:17:08 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌÐò\ma /
//                    in.c                                                   /
//    Command line =  E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌÐò\ma /
//                    in.c --cpu=m8 -ms -o E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢ /
//                    ²¼DTMF½âÂëMega³ÌÐò\Debug\Obj\ -lC                      /
//                    E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌÐò\De /
//                    bug\List\ -lA E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½ /
//                    âÂëMega³ÌÐò\Debug\List\ --initializers_in_flash -z3    /
//                    --no_cse --no_inline --no_code_motion --no_cross_call  /
//                    --no_clustering --no_tbaa --debug                      /
//                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR   /
//                    Systems\Embedded Workbench 4.0 Evaluation\avr\INC\"    /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench    /
//                    4.0 Evaluation\avr\INC\CLIB\" --eeprom_size 512        /
//    List file    =  E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌÐò\De /
//                    bug\List\main.s90                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??on_timer1_compA??INTVEC 12`
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSR
        PUBWEAK _A_ADMUX
        PUBWEAK _A_OCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TIMSK
        PUBWEAK _A_UBRRH
        PUBWEAK _A_UBRRL
        PUBWEAK _A_UCSRA
        PUBWEAK _A_UCSRB
        PUBWEAK _A_UDR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC g_fifo
        PUBLIC g_fifo_p0
        PUBLIC g_fifo_p1
        PUBLIC get_fifo_len
        FUNCTION get_fifo_len,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC init_ad
        FUNCTION init_ad,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC init_uart
        FUNCTION init_uart,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC is_fifo_empty
        FUNCTION is_fifo_empty,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC is_fifo_full
        FUNCTION is_fifo_full,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,0a1a03H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC on_timer1_compA
        FUNCTION on_timer1_compA,021231H
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC read_fifo
        FUNCTION read_fifo,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC write_fifo
        FUNCTION write_fifo,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC write_uart
        FUNCTION write_uart,0203H
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon1
        
on_timer1_compA     SYMBOL "on_timer1_compA"
`??on_timer1_compA??INTVEC 12` SYMBOL "??INTVEC 12", on_timer1_compA

        EXTERN init_dtmf_decoder
        FUNCTION init_dtmf_decoder,0200H
        EXTERN decode_dtmf
        FUNCTION decode_dtmf,0202H

// E:\Â¼ÒôºÐ¹¤×÷Ä¿Â¼\Èí¼þ½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌÐò\main.c
//    1 
//    2 #include <ioavr.h>

        ASEGN ABSOLUTE:DATA:NOROOT,024H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,026H
// union <unnamed> volatile __io _A_ADCSR
_A_ADCSR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,027H
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,029H
// union <unnamed> volatile __io _A_UBRRL
_A_UBRRL:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,02aH
// union <unnamed> volatile __io _A_UCSRB
_A_UCSRB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// union <unnamed> volatile __io _A_UCSRA
_A_UCSRA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
// union <unnamed> volatile __io _A_UDR
_A_UDR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,040H
// union <unnamed> volatile __io _A_UBRRH
_A_UBRRH:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS 1
//    3 
//    4 
//    5 //
//    6 // ËµÃ÷
//    7 //
//    8 // Õâ¸öÐ¡³ÌÐòÊÇ²âÊÔ DTMF ½âÂëÆ÷¹¤×÷µÄ¡£
//    9 // ²âÊÔÆ½Ì¨: ATMega8L, 3.3V¹©µç, 8M¾§ÕñÍâ½Ó, IAR
//   10 // ADC0 ¹Ü½ÅÖ±Á÷Æ«Ñ¹ÖÁ Vcc/2 (Í¨¹ýÁ½¸öÏàµÈµÄµç×è¶Ô Vcc ·ÖÑ¹)
//   11 // DTMF ÐÅºÅÍ¨¹ý 1 ¸öµçÈÝñîºÏ½øADC0 ¹Ü½Å
//   12 // ²âÊÔ·½·¨£ºÊ×ÏÈ°´ÕÕÉÏÊöËùËµ½ÓºÃÓ²¼þ
//   13 //           Íâ²¿²úÉú DTMF ÐÅºÅÊäÈë½øÀ´
//   14 //           ÔËÐÐ±¾³ÌÐò
//   15 //           ´Ó´®¿Ú½ÓÊÕ DTMF ½âÂë½á¹û
//   16 //
//   17 // author: hendry
//   18 // date: 2008/12
//   19 //
//   20 
//   21 
//   22 
//   23 //
//   24 // ×Ô¶¨ÒåÀàÐÍ
//   25 //
//   26 typedef		unsigned char		bool;
//   27 #define		true				1
//   28 #define		false				0
//   29 
//   30 
//   31 //
//   32 // A/D ²ÉÑù»º´æ
//   33 //
//   34 #define			FIFO_LEN				8
//   35 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   36 unsigned char	g_fifo_p0 = 0, g_fifo_p1 = 0;
g_fifo_p0:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
g_fifo_p1:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   37 unsigned char	g_fifo[FIFO_LEN];
g_fifo:
        DS 8
//   38 

        RSEG CODE:CODE:NOROOT(1)
//   39 unsigned char get_fifo_len()
get_fifo_len:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function get_fifo_len
//   40 {
//   41 	if (g_fifo_p1 >= g_fifo_p0)
        LDS     R16, g_fifo_p1
        LDS     R17, g_fifo_p0
        CP      R16, R17
        BRCS    ??get_fifo_len_0
//   42 	{
//   43 		return (g_fifo_p1 - g_fifo_p0);
        LDS     R16, g_fifo_p1
        LDS     R17, g_fifo_p0
        SUB     R16, R17
        RET
//   44 	}
//   45 	else
//   46 	{
//   47 		return (g_fifo_p1 + FIFO_LEN - g_fifo_p0);
??get_fifo_len_0:
        LDS     R16, g_fifo_p1
        SUBI    R16, 248
        LDS     R17, g_fifo_p0
        SUB     R16, R17
        RET
        CFI EndBlock cfiBlock0
//   48 	}
//   49 }
//   50 

        RSEG CODE:CODE:NOROOT(1)
//   51 bool is_fifo_empty()
is_fifo_empty:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function is_fifo_empty
//   52 {
//   53 	return (get_fifo_len() == 0);
        FUNCALL is_fifo_empty, get_fifo_len
        LOCFRAME RSTACK, 2, STACK
        RCALL   get_fifo_len
        TST     R16
        BRNE    ??is_fifo_empty_0
        LDI     R16, 1
        RET
??is_fifo_empty_0:
        LDI     R16, 0
        RET
        CFI EndBlock cfiBlock1
//   54 }
//   55 

        RSEG CODE:CODE:NOROOT(1)
//   56 bool is_fifo_full()
is_fifo_full:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function is_fifo_full
//   57 {
//   58 	return (get_fifo_len() == (FIFO_LEN - 1));
        FUNCALL is_fifo_full, get_fifo_len
        LOCFRAME RSTACK, 2, STACK
        RCALL   get_fifo_len
        CPI     R16, 7
        BRNE    ??is_fifo_full_0
        LDI     R16, 1
        RET
??is_fifo_full_0:
        LDI     R16, 0
        RET
        CFI EndBlock cfiBlock2
//   59 }
//   60 

        RSEG CODE:CODE:NOROOT(1)
//   61 unsigned char read_fifo()
read_fifo:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function read_fifo
//   62 {
//   63 	unsigned char	ch;
//   64 	
//   65 	ch = g_fifo[g_fifo_p0 ++];
        LDS     R16, g_fifo_p0
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(g_fifo) & 0xFFFF))
        SBCI    R31, (-(g_fifo) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R30, LOW(g_fifo_p0)
        LDI     R31, (g_fifo_p0) >> 8
        LD      R17, Z
        INC     R17
        ST      Z, R17
//   66 	
//   67 	if (g_fifo_p0 == FIFO_LEN)
        LDS     R17, g_fifo_p0
        CPI     R17, 8
        BRNE    ??read_fifo_0
//   68 	{
//   69 		g_fifo_p0 = 0;
        LDI     R17, 0
        STS     g_fifo_p0, R17
//   70 	}
//   71 	
//   72 	return ch;
??read_fifo_0:
        RET
        CFI EndBlock cfiBlock3
//   73 }
//   74 

        RSEG CODE:CODE:NOROOT(1)
//   75 void write_fifo(unsigned char ch)
write_fifo:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function write_fifo
//   76 {
//   77 	g_fifo[g_fifo_p1 ++] = ch;
        LDS     R18, g_fifo_p1
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_fifo) & 0xFFFF))
        SBCI    R31, (-(g_fifo) & 0xFFFF) >> 8
        ST      Z, R16
        LDI     R30, LOW(g_fifo_p1)
        LDI     R31, (g_fifo_p1) >> 8
        LD      R16, Z
        INC     R16
        ST      Z, R16
//   78 	
//   79 	if (g_fifo_p1 == FIFO_LEN)
        LDS     R16, g_fifo_p1
        CPI     R16, 8
        BRNE    ??write_fifo_0
//   80 	{
//   81 		g_fifo_p1 = 0;
        LDI     R16, 0
        STS     g_fifo_p1, R16
//   82 	}
//   83 }
??write_fifo_0:
        RET
        CFI EndBlock cfiBlock4
//   84 
//   85 
//   86 
//   87 
//   88 
//   89 //
//   90 // ³õÊ¼»¯´®¿Ú
//   91 // Ê¹ÓÃ 8MHz ¾§Õñ£¬115200bps
//   92 //

        RSEG CODE:CODE:NOROOT(1)
//   93 void init_uart()
init_uart:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function init_uart
//   94 {
//   95 	UBRRL = 8;					
        LDI     R16, 8
        OUT     0x09, R16
//   96 	UCSRA = (1<<U2X);
        LDI     R16, 2
        OUT     0x0B, R16
//   97 	UCSRB = (1<<RXCIE) | (1<<TXEN);
        LDI     R16, 136
        OUT     0x0A, R16
//   98 	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
        LDI     R16, 134
        OUT     0x20, R16
//   99 }
        RET
        CFI EndBlock cfiBlock5
//  100 
//  101 //
//  102 // ´®¿Ú·¢ËÍ
//  103 //

        RSEG CODE:CODE:NOROOT(1)
//  104 void write_uart(char ch)
write_uart:
??write_uart_0:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function write_uart
//  105 {
//  106 	while (!(UCSRA & (1<<UDRE)))
        SBIS    0x0B, 0x05
        RJMP    ??write_uart_0
//  107 	{}
//  108 	
//  109 	UDR = ch;
        OUT     0x0C, R16
//  110 }
        RET
        CFI EndBlock cfiBlock6
//  111 
//  112 
//  113 //
//  114 // ³õÊ¼»¯ A/D ºÍ timer
//  115 //

        RSEG CODE:CODE:NOROOT(1)
//  116 void init_ad()
init_ad:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function init_ad
//  117 {
//  118 	ADMUX = (1<<REFS0);
        LDI     R16, 64
        OUT     0x07, R16
//  119 	ADCSR = (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | ( 1<<ADPS1) | (1<<ADPS0);
        LDI     R16, 227
        OUT     0x06, R16
//  120 	TCCR1B = (1<<WGM12)| (1<<CS11);
        LDI     R16, 10
        OUT     0x2E, R16
//  121 	OCR1A = 249;
        LDI     R16, 249
        LDI     R17, 0
        OUT     0x2B, R17
        OUT     0x2A, R16
//  122 	TIMSK |= (1 << OCIE1A);	
        IN      R16, 0x39
        ORI     R16, 0x10
        OUT     0x39, R16
//  123 }
        RET
        CFI EndBlock cfiBlock7
//  124 
//  125 
//  126 //
//  127 // timer ÖÐ¶Ï
//  128 //
//  129 #pragma vector = TIMER1_COMPA_vect

        RSEG CODE:CODE:NOROOT(1)
//  130 __interrupt void on_timer1_compA()
on_timer1_compA:
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function on_timer1_compA
//  131 {
        FUNCALL on_timer1_compA, is_fifo_full
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL on_timer1_compA, write_fifo
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R31
        CFI R31 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R30
        CFI R30 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R3
        CFI R3 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R2
        CFI R2 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R1
        CFI R1 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        ST      -Y, R0
        CFI R0 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
        ST      -Y, R23
        CFI R23 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
        ST      -Y, R22
        CFI R22 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
        ST      -Y, R21
        CFI R21 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
        ST      -Y, R20
        CFI R20 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
        ST      -Y, R19
        CFI R19 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
        ST      -Y, R18
        CFI R18 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
        ST      -Y, R17
        CFI R17 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
        ST      -Y, R16
        CFI R16 Frame(CFA_Y, -17)
        CFI CFA_Y Y+17
        IN      R26, 0x3F
//  132 	unsigned char	low, high;
//  133 	unsigned short	adc_value;
//  134 	
//  135 	//
//  136 	// ¶ÁÈ¡ A/D ²ÉÑùÖµ
//  137 	//
//  138 	low = ADCL;
        IN      R16, 0x04
//  139 	high = ADCH;
        IN      R25, 0x05
//  140 	adc_value = (low + (high << 8));
        LDI     R17, 0
        LDI     R24, 0
        ADD     R24, R16
        ADC     R25, R17
//  141 	
//  142 	//
//  143 	// ÏÞ·ù
//  144 	//
//  145 	if (adc_value < 0x180)
        CPI     R24, 128
        LDI     R16, 1
        CPC     R25, R16
        BRCC    ??on_timer1_compA_0
//  146 	{
//  147 		adc_value = 0;
        LDI     R24, 0
        RJMP    ??on_timer1_compA_1
//  148 	}
//  149 	else if (adc_value > 0x27f)
??on_timer1_compA_0:
        CPI     R24, 128
        LDI     R16, 2
        CPC     R25, R16
        BRCS    ??on_timer1_compA_2
//  150 	{
//  151 		adc_value = 0xff;
        LDI     R24, 255
        RJMP    ??on_timer1_compA_1
//  152 	}
//  153 	else
//  154 	{
//  155 		adc_value = adc_value - 0x180;
??on_timer1_compA_2:
        SUBI    R24, 128
//  156 	}
//  157 
//  158 	//
//  159 	// Ð´Èë fifo
//  160 	//
//  161 	if (!is_fifo_full())
??on_timer1_compA_1:
        RCALL   is_fifo_full
        TST     R16
        BRNE    ??on_timer1_compA_3
//  162 	{
//  163 		write_fifo((unsigned char)adc_value);
        MOV     R16, R24
        RCALL   write_fifo
//  164 	}	
//  165 }
??on_timer1_compA_3:
        OUT     0x3F, R26
        LD      R16, Y+
        CFI R16 SameValue
        CFI CFA_Y Y+16
        LD      R17, Y+
        CFI R17 SameValue
        CFI CFA_Y Y+15
        LD      R18, Y+
        CFI R18 SameValue
        CFI CFA_Y Y+14
        LD      R19, Y+
        CFI R19 SameValue
        CFI CFA_Y Y+13
        LD      R20, Y+
        CFI R20 SameValue
        CFI CFA_Y Y+12
        LD      R21, Y+
        CFI R21 SameValue
        CFI CFA_Y Y+11
        LD      R22, Y+
        CFI R22 SameValue
        CFI CFA_Y Y+10
        LD      R23, Y+
        CFI R23 SameValue
        CFI CFA_Y Y+9
        LD      R0, Y+
        CFI R0 SameValue
        CFI CFA_Y Y+8
        LD      R1, Y+
        CFI R1 SameValue
        CFI CFA_Y Y+7
        LD      R2, Y+
        CFI R2 SameValue
        CFI CFA_Y Y+6
        LD      R3, Y+
        CFI R3 SameValue
        CFI CFA_Y Y+5
        LD      R30, Y+
        CFI R30 SameValue
        CFI CFA_Y Y+4
        LD      R31, Y+
        CFI R31 SameValue
        CFI CFA_Y Y+3
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+2
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+1
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+0
        RETI
        CFI EndBlock cfiBlock8
//  166 
//  167 
//  168 
//  169 

        RSEG CODE:CODE:NOROOT(1)
//  170 void main( void )
main:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function main
//  171 {
//  172 	signed char	ch;
//  173 	
//  174 	//
//  175 	// DTMF ½âÂë³ÌÐòÉùÃ÷
//  176 	//
//  177 	extern void init_dtmf_decoder();
//  178 	extern unsigned char decode_dtmf(signed char sample);
//  179 
//  180 	//
//  181 	// ³õÊ¼»¯Ó²¼þ
//  182 	//
//  183 	init_uart();
        FUNCALL main, init_uart
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, init_ad
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, init_dtmf_decoder
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, is_fifo_empty
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, read_fifo
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, decode_dtmf
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, write_uart
        LOCFRAME RSTACK, 2, STACK
        RCALL   init_uart
//  184 	init_ad();
        RCALL   init_ad
//  185 	asm("SEI");
        SEI
//  186 	
//  187 	
//  188 	//
//  189 	// ³õÊ¼»¯½âÂëÆ÷
//  190 	//
//  191 	init_dtmf_decoder();
        RCALL   init_dtmf_decoder
//  192 		
//  193 	
//  194 	while (1)
//  195 	{
//  196 		if (!is_fifo_empty())
??main_0:
        RCALL   is_fifo_empty
        TST     R16
        BRNE    ??main_0
//  197 		{
//  198 			// ¶ÁÈ¡ fifo
//  199 			ch = read_fifo();
        RCALL   read_fifo
//  200 			
//  201 			// ×ª³ÉÓÐ·ûºÅÊý
//  202 			ch += -128;
        SUBI    R16, 128
//  203 			
//  204 			// ËÍÈë½âÂëÆ÷
//  205 			ch = decode_dtmf(ch);
        RCALL   decode_dtmf
//  206 			
//  207 			// Êä³ö½âÂë½á¹û
//  208 			if (ch != 0)
        TST     R16
        BREQ    ??main_0
//  209 			{
//  210 				write_uart(ch);
        RCALL   write_uart
        RJMP    ??main_0
        CFI EndBlock cfiBlock9
//  211 			}
//  212 		}
//  213 	}
//  214 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 12
`??on_timer1_compA??INTVEC 12`:
        RJMP    on_timer1_compA

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DW      SFE(NEAR_Z) - SFB(NEAR_Z)
        DW      SFB(NEAR_Z)
        DW      0
        REQUIRE ?need_segment_init

        END
//  215 
//  216 
// 
//  13 bytes in segment ABSOLUTE
// 350 bytes in segment CODE
//   6 bytes in segment INITTAB
//   2 bytes in segment INTVEC
//  10 bytes in segment NEAR_Z
// 
// 350 bytes of CODE memory (+  8 bytes shared)
//  10 bytes of DATA memory (+ 13 bytes shared)
//
//Errors: none
//Warnings: none
