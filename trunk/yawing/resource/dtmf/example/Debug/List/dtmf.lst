##############################################################################
#                                                                            #
#                                                      11/Dec/2008  17:55:51 #
# IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\dtm #
#                    f.c                                                     #
#    Command line =  E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\dtm #
#                    f.c --cpu=m8 -ms -o E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼ #
#                    DTMF½âÂëMega³ÌĞò\Debug\Obj\ -lC                         #
#                    E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\Deb #
#                    ug\List\ -lA E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂ #
#                    ëMega³ÌĞò\Debug\List\ --initializers_in_flash -z3       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call   #
#                    --no_clustering --no_tbaa --debug                       #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR    #
#                    Systems\Embedded Workbench 4.0 Evaluation\avr\INC\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0    #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\Deb #
#                    ug\List\dtmf.lst                                        #
#    Object file  =  E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\Deb #
#                    ug\Obj\dtmf.r90                                         #
#                                                                            #
#                                                                            #
##############################################################################

E:\Â¼ÒôºĞ¹¤×÷Ä¿Â¼\Èí¼ş½âÂë²âÊÔ\·¢²¼DTMF½âÂëMega³ÌĞò\dtmf.c
      1          
      2          
      3          #include <string.h>
      4          #include <stdlib.h>
      5          
      6          
      7          //
      8          // DTMF ½âÂë³ÌĞò
      9          // author: hendry
     10          // date: 2008/11
     11          //
     12          
     13          //
     14          // ×¢Òâ£º1) ²ÉÑùÂÊ 4000 bps£¨²ÉÑùÂÊºÜµÍ£¬½µµÍ¶ÔÏµÍ³ÒªÇó£¬½âÂë×¼È·¶ÈÒ»µã²»º¬ºı£¬(*^__^*) ÎûÎû¡­¡­) 
     15          //
     16          //      2) ²ÉÑù¾«¶È 8bit, signed char, ×¢ÒâÊÇ ¡°ÓĞ·ûºÅÊı¡±°¡!! Ç§Íò±ğ¸ã´íÁË, Èç¹ûÊäÈëÎŞ·ûºÅÊı£¬¿ŞÈ¥°É.. 
     17          //
     18          //      3) Ã¿ÊäÈë 50 ¸ö²ÉÑùµã¾ÍµÃµ½Ò»´Î DTMF ½âÂë£¬ÀúÊ± 12.5ms, ¹ú±êÒªÇó DTMF Âë³ÖĞøÊ±¼ä >= 40ms, Òò´ËÁ¬Ğø½âÂëµÄ»°¿ÉÒÔµÃµ½Á¬Ğø3¸öÏàÍ¬ÂëÖµ£¬Êµ¼ÊÉÏ£¬ÎÒ¾ÍÊÇÕâÑùÌá¸ß¿¹¸ÉÈÅĞÔµÄ¡£ 
     19          //
     20          //     4) ÊôÓÚ±¾ÈËÔ­´´£¬ÇëÎğÓÃ×÷ÉÌÓÃ£¬·ñÔò±£Áô×·¾¿È¨Àû¡£ 
     21          //
     22          // by hendry, 2008/11 
     23          //
     24          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     25          unsigned char	s_dtmf_p;
   \                     s_dtmf_p:
   \   00000000                      DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     26          long			s_dtmf_real[8];
   \                     s_dtmf_real:
   \   00000000                      DS 32

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27          long			s_dtmf_image[8];
   \                     s_dtmf_image:
   \   00000000                      DS 32
     28          

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     29          const unsigned char g_sincos_len = 50;
   \                     g_sincos_len:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for g_sincos_len>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     30          const signed char g_cos_table[400] = {(signed char)0x7E,(signed char)0x3A,(signed char)0xB7,(signed char)0x83,(signed char)0xD7,(signed char)0x57,(signed char)0x79,(signed char)0x18,(signed char)0x9D,(signed char)0x8D,(signed char)0xFA,(signed char)0x6D,(signed char)0x6A,(signed char)0xF4,(signed char)0x8B,(signed char)0xA1,(signed char)0x1E,(signed char)0x7A,(signed char)0x52,(signed char)0xD1,(signed char)0x83,(signed char)0xBC,(signed char)0x3F,(signed char)0x7E,(signed char)0x34,(signed char)0xB2,(signed char)0x84,(signed char)0xDD,(signed char)0x5B,(signed char)0x77,(signed char)0x12,(signed char)0x99,(signed char)0x90,(signed char)0x00,(signed char)0x70,(signed char)0x67,(signed char)0xEE,(signed char)0x89,(signed char)0xA5,(signed char)0x24,
   \                     g_cos_table:
   \   00000000                      DS 400
   \   00000190                      REQUIRE `?<Initializer for g_cos_table>`
     31          (signed char)0x7C,(signed char)0x4E,(signed char)0xCB,(signed char)0x82,(signed char)0xC1,(signed char)0x44,(signed char)0x7D,(signed char)0x2F,(signed char)0xAD,(signed char)0x86,(signed char)0x7E,(signed char)0x2D,(signed char)0xA1,(signed char)0x91,(signed char)0x10,(signed char)0x7B,(signed char)0x47,(signed char)0xB8,(signed char)0x86,(signed char)0xF2,(signed char)0x70,(signed char)0x5D,(signed char)0xD2,(signed char)0x82,(signed char)0xD5,(signed char)0x60,(signed char)0x6E,(signed char)0xEE,(signed char)0x85,(signed char)0xBB,(signed char)0x4A,(signed char)0x7A,(signed char)0x0C,(signed char)0x8F,(signed char)0xA4,(signed char)0x30,(signed char)0x7E,(signed char)0x29,(signed char)0x9F,(signed char)0x93,
     32          (signed char)0x14,(signed char)0x7B,(signed char)0x44,(signed char)0xB4,(signed char)0x87,(signed char)0xF6,(signed char)0x72,(signed char)0x5A,(signed char)0xCE,(signed char)0x82,(signed char)0xD9,(signed char)0x62,(signed char)0x6C,(signed char)0xEA,(signed char)0x84,(signed char)0xBE,(signed char)0x4D,(signed char)0x78,(signed char)0x08,(signed char)0x8D,(signed char)0x7E,(signed char)0x1D,(signed char)0x8F,(signed char)0xAF,(signed char)0x4B,(signed char)0x74,(signed char)0xEA,(signed char)0x82,(signed char)0xDC,(signed char)0x6D,(signed char)0x56,(signed char)0xBA,(signed char)0x8A,(signed char)0x0F,(signed char)0x7D,(signed char)0x2B,(signed char)0x96,(signed char)0xA5,(signed char)0x3F,(signed char)0x79,
     33          (signed char)0xF8,(signed char)0x84,(signed char)0xCF,(signed char)0x65,(signed char)0x60,(signed char)0xC7,(signed char)0x86,(signed char)0x01,(signed char)0x7B,(signed char)0x38,(signed char)0x9F,(signed char)0x9B,(signed char)0x33,(signed char)0x7C,(signed char)0x06,(signed char)0x87,(signed char)0xC2,(signed char)0x5C,(signed char)0x69,(signed char)0xD4,(signed char)0x83,(signed char)0xF3,(signed char)0x77,(signed char)0x44,(signed char)0xA9,(signed char)0x94,(signed char)0x25,(signed char)0x7E,(signed char)0x14,(signed char)0x8C,(signed char)0x7E,(signed char)0x0C,(signed char)0x84,(signed char)0xDD,(signed char)0x75,(signed char)0x38,(signed char)0x95,(signed char)0xB4,(signed char)0x5D,(signed char)0x5D,
     34          (signed char)0xB4,(signed char)0x95,(signed char)0x38,(signed char)0x76,(signed char)0xDE,(signed char)0x84,(signed char)0x0B,(signed char)0x7E,(signed char)0x0C,(signed char)0x84,(signed char)0xDD,(signed char)0x75,(signed char)0x39,(signed char)0x95,(signed char)0xB3,(signed char)0x5D,(signed char)0x5E,(signed char)0xB5,(signed char)0x94,(signed char)0x37,(signed char)0x76,(signed char)0xDF,(signed char)0x84,(signed char)0x0A,(signed char)0x7E,(signed char)0x0D,(signed char)0x84,(signed char)0xDC,(signed char)0x75,(signed char)0x39,(signed char)0x96,(signed char)0xB3,(signed char)0x5C,(signed char)0x5E,(signed char)0xB5,(signed char)0x94,(signed char)0x37,(signed char)0x76,(signed char)0xDF,(signed char)0x84,
     35          (signed char)0x7E,(signed char)0xD7,(signed char)0x9C,(signed char)0x69,(signed char)0x20,(signed char)0x82,(signed char)0x31,(signed char)0x5E,(signed char)0x92,(signed char)0xE9,(signed char)0x7D,(signed char)0xC7,(signed char)0xA8,(signed char)0x72,(signed char)0x0F,(signed char)0x85,(signed char)0x41,(signed char)0x51,(signed char)0x8B,(signed char)0xFA,(signed char)0x79,(signed char)0xB8,(signed char)0xB6,(signed char)0x78,(signed char)0xFD,(signed char)0x8A,(signed char)0x4F,(signed char)0x43,(signed char)0x85,(signed char)0x0C,(signed char)0x73,(signed char)0xAA,(signed char)0xC5,(signed char)0x7C,(signed char)0xEB,(signed char)0x91,(signed char)0x5C,(signed char)0x33,(signed char)0x83,(signed char)0x1E,
     36          (signed char)0x6A,(signed char)0x9E,(signed char)0xD5,(signed char)0x7E,(signed char)0xDA,(signed char)0x9B,(signed char)0x68,(signed char)0x23,(signed char)0x82,(signed char)0x2F,(signed char)0x7E,(signed char)0xC1,(signed char)0xC2,(signed char)0x7E,(signed char)0xBF,(signed char)0xC3,(signed char)0x7E,(signed char)0xBE,(signed char)0xC5,(signed char)0x7E,(signed char)0xBC,(signed char)0xC6,(signed char)0x7E,(signed char)0xBB,(signed char)0xC8,(signed char)0x7E,(signed char)0xBA,(signed char)0xC9,(signed char)0x7E,(signed char)0xB9,(signed char)0xCA,(signed char)0x7E,(signed char)0xB7,(signed char)0xCC,(signed char)0x7D,(signed char)0xB6,(signed char)0xCD,(signed char)0x7D,(signed char)0xB5,(signed char)0xCF,
     37          (signed char)0x7D,(signed char)0xB3,(signed char)0xD0,(signed char)0x7D,(signed char)0xB2,(signed char)0xD2,(signed char)0x7D,(signed char)0xB1,(signed char)0xD3,(signed char)0x7C,(signed char)0xB0,(signed char)0xD5,(signed char)0x7C,(signed char)0xAE,(signed char)0xD6,(signed char)0x7C,(signed char)0xAD,(signed char)0xD8,(signed char)0x7B,(signed char)0xAC,(signed char)0x7E,(signed char)0xAA,(signed char)0xF7,(signed char)0x62,(signed char)0x83,(signed char)0x48,(signed char)0x1B,(signed char)0x93,(signed char)0x79,(signed char)0xC8,(signed char)0xD3,(signed char)0x75,(signed char)0x8E,(signed char)0x27,(signed char)0x3D,(signed char)0x86,(signed char)0x6A,(signed char)0xEB,(signed char)0xB4,(signed char)0x7D,
     38          (signed char)0xA1,(signed char)0x03,(signed char)0x5A,(signed char)0x82,(signed char)0x52,(signed char)0x0F,(signed char)0x9A,(signed char)0x7C,(signed char)0xBD,(signed char)0xDF,(signed char)0x6F,(signed char)0x89,(signed char)0x33,(signed char)0x32,(signed char)0x89,(signed char)0x70,(signed char)0xDE,(signed char)0xBE,(signed char)0x7C,(signed char)0x9A,(signed char)0x10,(signed char)0x51,(signed char)0x82,(signed char)0x5B,(signed char)0x02,(signed char)0xA2,(signed char)0x7D,(signed char)0xB3,(signed char)0xEC,(signed char)0x69,(signed char)0x7E,(signed char)0x96,(signed char)0x33,(signed char)0x14,(signed char)0xAB,(signed char)0x7A,(signed char)0x88,(signed char)0x4F,(signed char)0xF3,(signed char)0xC6,
     39          (signed char)0x6D,(signed char)0x82,(signed char)0x65,(signed char)0xD4,(signed char)0xE5,(signed char)0x5A,(signed char)0x85,(signed char)0x75,(signed char)0xB7,(signed char)0x05,(signed char)0x40,(signed char)0x8F,(signed char)0x7D,(signed char)0x9F,(signed char)0x25,(signed char)0x22,(signed char)0xA1,(signed char)0x7D,(signed char)0x8E,(signed char)0x43,(signed char)0x02,(signed char)0xBA,(signed char)0x74,(signed char)0x84,(signed char)0x5C,(signed char)0xE2,(signed char)0xD7,(signed char)0x63,(signed char)0x82,(signed char)0x6F,(signed char)0xC3,(signed char)0xF7,(signed char)0x4C,(signed char)0x89,(signed char)0x7B,(signed char)0xA9,(signed char)0x17,(signed char)0x30,(signed char)0x98,(signed char)0x7E
     40          };

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     41          const signed char g_sin_table[400] = {(signed char)0x00,(signed char)0x70,(signed char)0x67,(signed char)0xEE,(signed char)0x89,(signed char)0xA5,(signed char)0x24,(signed char)0x7C,(signed char)0x4E,(signed char)0xCC,(signed char)0x82,(signed char)0xC1,(signed char)0x44,(signed char)0x7D,(signed char)0x2F,(signed char)0xAD,(signed char)0x86,(signed char)0xE2,(signed char)0x5F,(signed char)0x75,(signed char)0x0C,(signed char)0x96,(signed char)0x93,(signed char)0x06,(signed char)0x73,(signed char)0x63,(signed char)0xE8,(signed char)0x87,(signed char)0xA9,(signed char)0x29,(signed char)0x7D,(signed char)0x49,(signed char)0xC6,(signed char)0x82,(signed char)0xC6,(signed char)0x49,(signed char)0x7D,(signed char)0x29,(signed char)0xA9,(signed char)0x87,
   \                     g_sin_table:
   \   00000000                      DS 400
   \   00000190                      REQUIRE `?<Initializer for g_sin_table>`
     42          (signed char)0xE8,(signed char)0x63,(signed char)0x73,(signed char)0x06,(signed char)0x93,(signed char)0x96,(signed char)0x0C,(signed char)0x75,(signed char)0x5F,(signed char)0xE2,(signed char)0x00,(signed char)0x76,(signed char)0x53,(signed char)0xC5,(signed char)0x83,(signed char)0xE3,(signed char)0x68,(signed char)0x67,(signed char)0xE1,(signed char)0x83,(signed char)0xC7,(signed char)0x55,(signed char)0x75,(signed char)0xFE,(signed char)0x89,(signed char)0xAE,(signed char)0x3D,(signed char)0x7D,(signed char)0x1B,(signed char)0x97,(signed char)0x9A,(signed char)0x21,(signed char)0x7D,(signed char)0x37,(signed char)0xAA,(signed char)0x8C,(signed char)0x04,(signed char)0x77,(signed char)0x50,(signed char)0xC2,
     43          (signed char)0x84,(signed char)0xE6,(signed char)0x6A,(signed char)0x65,(signed char)0xDD,(signed char)0x82,(signed char)0xCA,(signed char)0x58,(signed char)0x74,(signed char)0xFA,(signed char)0x88,(signed char)0xB1,(signed char)0x40,(signed char)0x7C,(signed char)0x18,(signed char)0x95,(signed char)0x9C,(signed char)0x25,(signed char)0x7E,(signed char)0x34,(signed char)0x00,(signed char)0x7B,(signed char)0x38,(signed char)0x9F,(signed char)0x9B,(signed char)0x32,(signed char)0x7C,(signed char)0x07,(signed char)0x87,(signed char)0xC1,(signed char)0x5C,(signed char)0x69,(signed char)0xD5,(signed char)0x83,(signed char)0xF2,(signed char)0x77,(signed char)0x45,(signed char)0xA9,(signed char)0x93,(signed char)0x25,
     44          (signed char)0x7E,(signed char)0x15,(signed char)0x8C,(signed char)0xB5,(signed char)0x52,(signed char)0x70,(signed char)0xE2,(signed char)0x82,(signed char)0xE4,(signed char)0x71,(signed char)0x50,(signed char)0xB4,(signed char)0x8D,(signed char)0x17,(signed char)0x7E,(signed char)0x23,(signed char)0x92,(signed char)0xAA,(signed char)0x46,(signed char)0x76,(signed char)0xF0,(signed char)0x83,(signed char)0xD6,(signed char)0x6A,(signed char)0x5B,(signed char)0xC0,(signed char)0x88,(signed char)0x09,(signed char)0x7C,(signed char)0x31,(signed char)0x00,(signed char)0x7D,(signed char)0x17,(signed char)0x87,(signed char)0xD2,(signed char)0x71,(signed char)0x43,(signed char)0x9C,(signed char)0xAB,(signed char)0x55,
     45          (signed char)0x65,(signed char)0xBE,(signed char)0x8F,(signed char)0x2D,(signed char)0x79,(signed char)0xE9,(signed char)0x82,(signed char)0xFF,(signed char)0x7D,(signed char)0x18,(signed char)0x87,(signed char)0xD2,(signed char)0x70,(signed char)0x43,(signed char)0x9C,(signed char)0xAA,(signed char)0x54,(signed char)0x65,(signed char)0xBF,(signed char)0x8F,(signed char)0x2D,(signed char)0x79,(signed char)0xEA,(signed char)0x82,(signed char)0xFF,(signed char)0x7D,(signed char)0x18,(signed char)0x87,(signed char)0xD1,(signed char)0x70,(signed char)0x44,(signed char)0x9C,(signed char)0xAA,(signed char)0x54,(signed char)0x65,(signed char)0xBF,(signed char)0x8F,(signed char)0x2C,(signed char)0x7A,(signed char)0xEB,
     46          (signed char)0x00,(signed char)0x77,(signed char)0xB3,(signed char)0xBA,(signed char)0x7A,(signed char)0xF7,(signed char)0x8C,(signed char)0x54,(signed char)0x3E,(signed char)0x84,(signed char)0x12,(signed char)0x70,(signed char)0xA6,(signed char)0xCA,(signed char)0x7D,(signed char)0xE5,(signed char)0x94,(signed char)0x60,(signed char)0x2E,(signed char)0x82,(signed char)0x23,(signed char)0x67,(signed char)0x9A,(signed char)0xDA,(signed char)0x7E,(signed char)0xD4,(signed char)0x9E,(signed char)0x6B,(signed char)0x1D,(signed char)0x83,(signed char)0x34,(signed char)0x5C,(signed char)0x91,(signed char)0xEC,(signed char)0x7C,(signed char)0xC4,(signed char)0xAA,(signed char)0x73,(signed char)0x0B,(signed char)0x86,
     47          (signed char)0x44,(signed char)0x4F,(signed char)0x8A,(signed char)0xFD,(signed char)0x78,(signed char)0xB5,(signed char)0xB8,(signed char)0x79,(signed char)0xFA,(signed char)0x8B,(signed char)0x00,(signed char)0x6D,(signed char)0x92,(signed char)0x02,(signed char)0x6C,(signed char)0x92,(signed char)0x03,(signed char)0x6B,(signed char)0x91,(signed char)0x05,(signed char)0x6A,(signed char)0x90,(signed char)0x06,(signed char)0x6A,(signed char)0x8F,(signed char)0x08,(signed char)0x69,(signed char)0x8F,(signed char)0x09,(signed char)0x68,(signed char)0x8E,(signed char)0x0B,(signed char)0x67,(signed char)0x8D,(signed char)0x0D,(signed char)0x66,(signed char)0x8D,(signed char)0x0E,(signed char)0x65,(signed char)0x8C,
     48          (signed char)0x10,(signed char)0x64,(signed char)0x8B,(signed char)0x11,(signed char)0x63,(signed char)0x8B,(signed char)0x13,(signed char)0x62,(signed char)0x8A,(signed char)0x14,(signed char)0x61,(signed char)0x8A,(signed char)0x16,(signed char)0x60,(signed char)0x89,(signed char)0x18,(signed char)0x5F,(signed char)0x89,(signed char)0x19,(signed char)0x5E,(signed char)0x00,(signed char)0x5C,(signed char)0x82,(signed char)0x4F,(signed char)0x12,(signed char)0x98,(signed char)0x7B,(signed char)0xC0,(signed char)0xDC,(signed char)0x71,(signed char)0x8A,(signed char)0x30,(signed char)0x35,(signed char)0x88,(signed char)0x6E,(signed char)0xE2,(signed char)0xBB,(signed char)0x7C,(signed char)0x9C,(signed char)0x0C,
     49          (signed char)0x53,(signed char)0x82,(signed char)0x58,(signed char)0x06,(signed char)0xA0,(signed char)0x7D,(signed char)0xB6,(signed char)0xE8,(signed char)0x6B,(signed char)0x86,(signed char)0x3B,(signed char)0x29,(signed char)0x8D,(signed char)0x74,(signed char)0xD6,(signed char)0xC6,(signed char)0x79,(signed char)0x95,(signed char)0x19,(signed char)0x4A,(signed char)0x83,(signed char)0x61,(signed char)0xF9,(signed char)0xA8,(signed char)0x7E,(signed char)0xAC,(signed char)0xF5,(signed char)0x64,(signed char)0x84,(signed char)0x46,(signed char)0x00,(signed char)0x45,(signed char)0x8D,(signed char)0x7C,(signed char)0xA3,(signed char)0x20,(signed char)0x27,(signed char)0x9E,(signed char)0x7D,(signed char)0x90,
     50          (signed char)0x3E,(signed char)0x07,(signed char)0xB5,(signed char)0x76,(signed char)0x85,(signed char)0x58,(signed char)0xE7,(signed char)0xD2,(signed char)0x67,(signed char)0x82,(signed char)0x6C,(signed char)0xC8,(signed char)0xF1,(signed char)0x50,(signed char)0x88,(signed char)0x79,(signed char)0xAD,(signed char)0x12,(signed char)0x35,(signed char)0x95,(signed char)0x7E,(signed char)0x97,(signed char)0x31,(signed char)0x16,(signed char)0xAA,(signed char)0x7A,(signed char)0x89,(signed char)0x4D,(signed char)0xF5,(signed char)0xC5,(signed char)0x6E,(signed char)0x82,(signed char)0x64,(signed char)0xD6,(signed char)0xE3,(signed char)0x5B,(signed char)0x84,(signed char)0x74,(signed char)0xB9,(signed char)0x03
     51          };
     52          
     53          
     54          
     55          //
     56          // dtmf decode initiation
     57          //

   \                                 In segment CODE, align 2, keep-with-next
     58          void init_dtmf_decoder()
   \                     init_dtmf_decoder:
     59          {
     60          	s_dtmf_p = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     s_dtmf_p, R16
     61          	memset(s_dtmf_real, 0, sizeof(long) * 8);
   \   00000006   E240               LDI     R20, 32
   \   00000008   E050               LDI     R21, 0
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   ....               LDI     R16, LOW(s_dtmf_real)
   \   00000010   ....               LDI     R17, (s_dtmf_real) >> 8
   \   00000012   ....               RCALL   memset
     62          	memset(s_dtmf_image, 0, sizeof(long) * 8);
   \   00000014   E240               LDI     R20, 32
   \   00000016   E050               LDI     R21, 0
   \   00000018   E020               LDI     R18, 0
   \   0000001A   E030               LDI     R19, 0
   \   0000001C   ....               LDI     R16, LOW(s_dtmf_image)
   \   0000001E   ....               LDI     R17, (s_dtmf_image) >> 8
   \   00000020   ....               RCALL   memset
     63          }
   \   00000022   9508               RET
     64          
     65          //
     66          // dtmf decode program
     67          //
     68          // input: sample = DTMF wave sample value, 
     69          //        sample rate = 4000 point per second
     70          //		  NOTE!! sample is "SIGNED" char, NOT "UNSIGNED" char !!
     71          // output: 0 = decoded not completed yet
     72          //		   '0123456789*#ABCD' = dtmf code
     73          //

   \                                 In segment CODE, align 2, keep-with-next
     74          unsigned char decode_dtmf(signed char sample)
   \                     decode_dtmf:
     75          {
   \   00000000   ....               RCALL   ?PROLOGUE5_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
     76          	unsigned char	i, low_freq, high_freq;
     77          	unsigned short	offset;
     78          	
     79          	for (i = 0, offset = s_dtmf_p; i < 8; i ++, offset += g_sincos_len)
   \   00000002   2444               CLR     R4
   \   00000004   9140....           LDS     R20, s_dtmf_p
   \   00000008   E050               LDI     R21, 0
   \   0000000A   C042               RJMP    ??decode_dtmf_0
     80          	{
     81          		s_dtmf_real[i] += sample * g_cos_table[offset];
   \                     ??decode_dtmf_1:
   \   0000000C   01FA               MOVW    R31:R30, R21:R20
   \   0000000E   ....               SUBI    R30, LOW((-(g_cos_table) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(g_cos_table) & 0xFFFF) >> 8
   \   00000012   8110               LD      R17, Z
   \   00000014   0201               MULS    R16, R17
   \   00000016   2C21               MOV     R2, R1
   \   00000018   0C22               LSL     R2
   \   0000001A   0822               SBC     R2, R2
   \   0000001C   2C32               MOV     R3, R2
   \   0000001E   2D24               MOV     R18, R4
   \   00000020   E030               LDI     R19, 0
   \   00000022   0F22               LSL     R18
   \   00000024   1F33               ROL     R19
   \   00000026   0F22               LSL     R18
   \   00000028   1F33               ROL     R19
   \   0000002A   01F9               MOVW    R31:R30, R19:R18
   \   0000002C   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   00000030   8180               LD      R24, Z
   \   00000032   8191               LDD     R25, Z+1
   \   00000034   81A2               LDD     R26, Z+2
   \   00000036   81B3               LDD     R27, Z+3
   \   00000038   0D80               ADD     R24, R0
   \   0000003A   1D91               ADC     R25, R1
   \   0000003C   1DA2               ADC     R26, R2
   \   0000003E   1DB3               ADC     R27, R3
   \   00000040   8380               ST      Z, R24
   \   00000042   8391               STD     Z+1, R25
   \   00000044   83A2               STD     Z+2, R26
   \   00000046   83B3               STD     Z+3, R27
     82          		s_dtmf_image[i] += sample * g_sin_table[offset];
   \   00000048   01FA               MOVW    R31:R30, R21:R20
   \   0000004A   ....               SUBI    R30, LOW((-(g_sin_table) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(g_sin_table) & 0xFFFF) >> 8
   \   0000004E   8110               LD      R17, Z
   \   00000050   0201               MULS    R16, R17
   \   00000052   2C21               MOV     R2, R1
   \   00000054   0C22               LSL     R2
   \   00000056   0822               SBC     R2, R2
   \   00000058   2C32               MOV     R3, R2
   \   0000005A   2D24               MOV     R18, R4
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   0F22               LSL     R18
   \   00000060   1F33               ROL     R19
   \   00000062   0F22               LSL     R18
   \   00000064   1F33               ROL     R19
   \   00000066   01F9               MOVW    R31:R30, R19:R18
   \   00000068   ....               SUBI    R30, LOW((-(s_dtmf_image) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(s_dtmf_image) & 0xFFFF) >> 8
   \   0000006C   8180               LD      R24, Z
   \   0000006E   8191               LDD     R25, Z+1
   \   00000070   81A2               LDD     R26, Z+2
   \   00000072   81B3               LDD     R27, Z+3
   \   00000074   0D80               ADD     R24, R0
   \   00000076   1D91               ADC     R25, R1
   \   00000078   1DA2               ADC     R26, R2
   \   0000007A   1DB3               ADC     R27, R3
   \   0000007C   8380               ST      Z, R24
   \   0000007E   8391               STD     Z+1, R25
   \   00000080   83A2               STD     Z+2, R26
   \   00000082   83B3               STD     Z+3, R27
     83          	}
   \   00000084   9443               INC     R4
   \   00000086   9120....           LDS     R18, g_sincos_len
   \   0000008A   E030               LDI     R19, 0
   \   0000008C   0F42               ADD     R20, R18
   \   0000008E   1F53               ADC     R21, R19
   \                     ??decode_dtmf_0:
   \   00000090   E018               LDI     R17, 8
   \   00000092   1641               CP      R4, R17
   \   00000094   F408               BRCC    $+2+2
   \   00000096   CFBA               RJMP    ??decode_dtmf_1
     84          
     85          	s_dtmf_p ++;
   \   00000098   ....               LDI     R30, LOW(s_dtmf_p)
   \   0000009A   ....               LDI     R31, (s_dtmf_p) >> 8
   \   0000009C   8100               LD      R16, Z
   \   0000009E   9503               INC     R16
   \   000000A0   8300               ST      Z, R16
     86          
     87          	if (s_dtmf_p == g_sincos_len)	// 50 sample has inputed, let's look at the result...
   \   000000A2   9100....           LDS     R16, s_dtmf_p
   \   000000A6   9110....           LDS     R17, g_sincos_len
   \   000000AA   1701               CP      R16, R17
   \   000000AC   F009               BREQ    $+2+2
   \   000000AE   C0F6               RJMP    ??decode_dtmf_2
     88          	{
     89          		// calculate |R| + |I|
     90          		for (i = 0; i < 8; i ++)
   \   000000B0   2444               CLR     R4
   \   000000B2   C030               RJMP    ??decode_dtmf_3
     91          		{
     92          			s_dtmf_real[i] = labs(s_dtmf_real[i]) + labs(s_dtmf_image[i]);
   \                     ??decode_dtmf_4:
   \   000000B4   2D04               MOV     R16, R4
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   0F00               LSL     R16
   \   000000BA   1F11               ROL     R17
   \   000000BC   0F00               LSL     R16
   \   000000BE   1F11               ROL     R17
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   000000C6   8100               LD      R16, Z
   \   000000C8   8111               LDD     R17, Z+1
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   ....               RCALL   labs
   \   000000D0   01C8               MOVW    R25:R24, R17:R16
   \   000000D2   01D9               MOVW    R27:R26, R19:R18
   \   000000D4   2D04               MOV     R16, R4
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   0F00               LSL     R16
   \   000000DA   1F11               ROL     R17
   \   000000DC   0F00               LSL     R16
   \   000000DE   1F11               ROL     R17
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(s_dtmf_image) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(s_dtmf_image) & 0xFFFF) >> 8
   \   000000E6   8100               LD      R16, Z
   \   000000E8   8111               LDD     R17, Z+1
   \   000000EA   8122               LDD     R18, Z+2
   \   000000EC   8133               LDD     R19, Z+3
   \   000000EE   ....               RCALL   labs
   \   000000F0   0F08               ADD     R16, R24
   \   000000F2   1F19               ADC     R17, R25
   \   000000F4   1F2A               ADC     R18, R26
   \   000000F6   1F3B               ADC     R19, R27
   \   000000F8   2D44               MOV     R20, R4
   \   000000FA   E050               LDI     R21, 0
   \   000000FC   0F44               LSL     R20
   \   000000FE   1F55               ROL     R21
   \   00000100   0F44               LSL     R20
   \   00000102   1F55               ROL     R21
   \   00000104   01FA               MOVW    R31:R30, R21:R20
   \   00000106   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   0000010A   8300               ST      Z, R16
   \   0000010C   8311               STD     Z+1, R17
   \   0000010E   8322               STD     Z+2, R18
   \   00000110   8333               STD     Z+3, R19
     93          		}
   \   00000112   9443               INC     R4
   \                     ??decode_dtmf_3:
   \   00000114   E008               LDI     R16, 8
   \   00000116   1640               CP      R4, R16
   \   00000118   F268               BRCS    ??decode_dtmf_4
     94          
     95          		// find max value of low freq
     96          		for (low_freq = 0, i = 1; i < 4; i ++)
   \   0000011A   E0A0               LDI     R26, 0
   \   0000011C   2444               CLR     R4
   \   0000011E   9443               INC     R4
   \   00000120   C021               RJMP    ??decode_dtmf_5
     97          		{
     98          			if (s_dtmf_real[i] > s_dtmf_real[low_freq])
   \                     ??decode_dtmf_6:
   \   00000122   2F0A               MOV     R16, R26
   \   00000124   E010               LDI     R17, 0
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   0F00               LSL     R16
   \   0000012C   1F11               ROL     R17
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   00000134   8140               LD      R20, Z
   \   00000136   8151               LDD     R21, Z+1
   \   00000138   8162               LDD     R22, Z+2
   \   0000013A   8173               LDD     R23, Z+3
   \   0000013C   2D04               MOV     R16, R4
   \   0000013E   E010               LDI     R17, 0
   \   00000140   0F00               LSL     R16
   \   00000142   1F11               ROL     R17
   \   00000144   0F00               LSL     R16
   \   00000146   1F11               ROL     R17
   \   00000148   01F8               MOVW    R31:R30, R17:R16
   \   0000014A   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   0000014E   8100               LD      R16, Z
   \   00000150   8111               LDD     R17, Z+1
   \   00000152   8122               LDD     R18, Z+2
   \   00000154   8133               LDD     R19, Z+3
   \   00000156   1740               CP      R20, R16
   \   00000158   0751               CPC     R21, R17
   \   0000015A   0762               CPC     R22, R18
   \   0000015C   0773               CPC     R23, R19
   \   0000015E   F40C               BRGE    ??decode_dtmf_7
     99          			{
    100          				low_freq = i;
   \   00000160   2DA4               MOV     R26, R4
    101          			}
    102          		}
   \                     ??decode_dtmf_7:
   \   00000162   9443               INC     R4
   \                     ??decode_dtmf_5:
   \   00000164   E004               LDI     R16, 4
   \   00000166   1640               CP      R4, R16
   \   00000168   F2E0               BRCS    ??decode_dtmf_6
    103          
    104          		// find max value of high freq
    105          		for (high_freq = 4, i = 5; i < 8; i ++)
   \   0000016A   E084               LDI     R24, 4
   \   0000016C   E005               LDI     R16, 5
   \   0000016E   2E40               MOV     R4, R16
   \   00000170   C021               RJMP    ??decode_dtmf_8
    106          		{
    107          			if (s_dtmf_real[i] > s_dtmf_real[high_freq])
   \                     ??decode_dtmf_9:
   \   00000172   2F08               MOV     R16, R24
   \   00000174   E010               LDI     R17, 0
   \   00000176   0F00               LSL     R16
   \   00000178   1F11               ROL     R17
   \   0000017A   0F00               LSL     R16
   \   0000017C   1F11               ROL     R17
   \   0000017E   01F8               MOVW    R31:R30, R17:R16
   \   00000180   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   00000184   8140               LD      R20, Z
   \   00000186   8151               LDD     R21, Z+1
   \   00000188   8162               LDD     R22, Z+2
   \   0000018A   8173               LDD     R23, Z+3
   \   0000018C   2D04               MOV     R16, R4
   \   0000018E   E010               LDI     R17, 0
   \   00000190   0F00               LSL     R16
   \   00000192   1F11               ROL     R17
   \   00000194   0F00               LSL     R16
   \   00000196   1F11               ROL     R17
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   ....               SUBI    R30, LOW((-(s_dtmf_real) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, (-(s_dtmf_real) & 0xFFFF) >> 8
   \   0000019E   8100               LD      R16, Z
   \   000001A0   8111               LDD     R17, Z+1
   \   000001A2   8122               LDD     R18, Z+2
   \   000001A4   8133               LDD     R19, Z+3
   \   000001A6   1740               CP      R20, R16
   \   000001A8   0751               CPC     R21, R17
   \   000001AA   0762               CPC     R22, R18
   \   000001AC   0773               CPC     R23, R19
   \   000001AE   F40C               BRGE    ??decode_dtmf_10
    108          			{
    109          				high_freq = i;
   \   000001B0   2D84               MOV     R24, R4
    110          			}
    111          		}
   \                     ??decode_dtmf_10:
   \   000001B2   9443               INC     R4
   \                     ??decode_dtmf_8:
   \   000001B4   E008               LDI     R16, 8
   \   000001B6   1640               CP      R4, R16
   \   000001B8   F2E0               BRCS    ??decode_dtmf_9
    112          
    113          		// clean up for continuous decoding
    114          		s_dtmf_p = 0;
   \   000001BA   E000               LDI     R16, 0
   \   000001BC   9300....           STS     s_dtmf_p, R16
    115          		memset(s_dtmf_real, 0, 32);
   \   000001C0   E240               LDI     R20, 32
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   E020               LDI     R18, 0
   \   000001C6   E030               LDI     R19, 0
   \   000001C8   ....               LDI     R16, LOW(s_dtmf_real)
   \   000001CA   ....               LDI     R17, (s_dtmf_real) >> 8
   \   000001CC   ....               RCALL   memset
    116          		memset(s_dtmf_image, 0, 32);
   \   000001CE   E240               LDI     R20, 32
   \   000001D0   E050               LDI     R21, 0
   \   000001D2   E020               LDI     R18, 0
   \   000001D4   E030               LDI     R19, 0
   \   000001D6   ....               LDI     R16, LOW(s_dtmf_image)
   \   000001D8   ....               LDI     R17, (s_dtmf_image) >> 8
   \   000001DA   ....               RCALL   memset
    117          		
    118          
    119          		// combine low and high frequency and decode out dtmf code
    120          		if ((low_freq == 0) && (high_freq == 4))
   \   000001DC   23AA               TST     R26
   \   000001DE   F421               BRNE    ??decode_dtmf_11
   \   000001E0   3084               CPI     R24, 4
   \   000001E2   F411               BRNE    ??decode_dtmf_11
    121          		{
    122          			return '1';
   \   000001E4   E301               LDI     R16, 49
   \   000001E6   C05B               RJMP    ??decode_dtmf_12
    123          		}
    124          		else if ((low_freq == 0) && (high_freq == 5))
   \                     ??decode_dtmf_11:
   \   000001E8   23AA               TST     R26
   \   000001EA   F421               BRNE    ??decode_dtmf_13
   \   000001EC   3085               CPI     R24, 5
   \   000001EE   F411               BRNE    ??decode_dtmf_13
    125          		{
    126          			return '2';
   \   000001F0   E302               LDI     R16, 50
   \   000001F2   C055               RJMP    ??decode_dtmf_12
    127          		}
    128          		else if ((low_freq == 0) && (high_freq == 6))
   \                     ??decode_dtmf_13:
   \   000001F4   23AA               TST     R26
   \   000001F6   F421               BRNE    ??decode_dtmf_14
   \   000001F8   3086               CPI     R24, 6
   \   000001FA   F411               BRNE    ??decode_dtmf_14
    129          		{
    130          			return '3';
   \   000001FC   E303               LDI     R16, 51
   \   000001FE   C04F               RJMP    ??decode_dtmf_12
    131          		}
    132          		else if ((low_freq == 0) && (high_freq == 7))
   \                     ??decode_dtmf_14:
   \   00000200   23AA               TST     R26
   \   00000202   F421               BRNE    ??decode_dtmf_15
   \   00000204   3087               CPI     R24, 7
   \   00000206   F411               BRNE    ??decode_dtmf_15
    133          		{
    134          			return 'A';
   \   00000208   E401               LDI     R16, 65
   \   0000020A   C049               RJMP    ??decode_dtmf_12
    135          		}
    136          		else if ((low_freq == 1) && (high_freq == 4))
   \                     ??decode_dtmf_15:
   \   0000020C   30A1               CPI     R26, 1
   \   0000020E   F421               BRNE    ??decode_dtmf_16
   \   00000210   3084               CPI     R24, 4
   \   00000212   F411               BRNE    ??decode_dtmf_16
    137          		{
    138          			return '4';
   \   00000214   E304               LDI     R16, 52
   \   00000216   C043               RJMP    ??decode_dtmf_12
    139          		}
    140          		else if ((low_freq == 1) && (high_freq == 5))
   \                     ??decode_dtmf_16:
   \   00000218   30A1               CPI     R26, 1
   \   0000021A   F421               BRNE    ??decode_dtmf_17
   \   0000021C   3085               CPI     R24, 5
   \   0000021E   F411               BRNE    ??decode_dtmf_17
    141          		{
    142          			return '5';
   \   00000220   E305               LDI     R16, 53
   \   00000222   C03D               RJMP    ??decode_dtmf_12
    143          		}
    144          		else if ((low_freq == 1) && (high_freq == 6))
   \                     ??decode_dtmf_17:
   \   00000224   30A1               CPI     R26, 1
   \   00000226   F421               BRNE    ??decode_dtmf_18
   \   00000228   3086               CPI     R24, 6
   \   0000022A   F411               BRNE    ??decode_dtmf_18
    145          		{
    146          			return '6';
   \   0000022C   E306               LDI     R16, 54
   \   0000022E   C037               RJMP    ??decode_dtmf_12
    147          		}
    148          		else if ((low_freq == 1) && (high_freq == 7))
   \                     ??decode_dtmf_18:
   \   00000230   30A1               CPI     R26, 1
   \   00000232   F421               BRNE    ??decode_dtmf_19
   \   00000234   3087               CPI     R24, 7
   \   00000236   F411               BRNE    ??decode_dtmf_19
    149          		{
    150          			return 'B';
   \   00000238   E402               LDI     R16, 66
   \   0000023A   C031               RJMP    ??decode_dtmf_12
    151          		}
    152          		else if ((low_freq == 2) && (high_freq == 4))
   \                     ??decode_dtmf_19:
   \   0000023C   30A2               CPI     R26, 2
   \   0000023E   F421               BRNE    ??decode_dtmf_20
   \   00000240   3084               CPI     R24, 4
   \   00000242   F411               BRNE    ??decode_dtmf_20
    153          		{
    154          			return '7';
   \   00000244   E307               LDI     R16, 55
   \   00000246   C02B               RJMP    ??decode_dtmf_12
    155          		}
    156          		else if ((low_freq == 2) && (high_freq == 5))
   \                     ??decode_dtmf_20:
   \   00000248   30A2               CPI     R26, 2
   \   0000024A   F421               BRNE    ??decode_dtmf_21
   \   0000024C   3085               CPI     R24, 5
   \   0000024E   F411               BRNE    ??decode_dtmf_21
    157          		{
    158          			return '8';
   \   00000250   E308               LDI     R16, 56
   \   00000252   C025               RJMP    ??decode_dtmf_12
    159          		}
    160          		else if ((low_freq == 2) && (high_freq == 6))
   \                     ??decode_dtmf_21:
   \   00000254   30A2               CPI     R26, 2
   \   00000256   F421               BRNE    ??decode_dtmf_22
   \   00000258   3086               CPI     R24, 6
   \   0000025A   F411               BRNE    ??decode_dtmf_22
    161          		{
    162          			return '9';
   \   0000025C   E309               LDI     R16, 57
   \   0000025E   C01F               RJMP    ??decode_dtmf_12
    163          		}
    164          		else if ((low_freq == 2) && (high_freq == 7))
   \                     ??decode_dtmf_22:
   \   00000260   30A2               CPI     R26, 2
   \   00000262   F421               BRNE    ??decode_dtmf_23
   \   00000264   3087               CPI     R24, 7
   \   00000266   F411               BRNE    ??decode_dtmf_23
    165          		{
    166          			return 'C';
   \   00000268   E403               LDI     R16, 67
   \   0000026A   C019               RJMP    ??decode_dtmf_12
    167          		}
    168          		else if ((low_freq == 3) && (high_freq == 4))
   \                     ??decode_dtmf_23:
   \   0000026C   30A3               CPI     R26, 3
   \   0000026E   F421               BRNE    ??decode_dtmf_24
   \   00000270   3084               CPI     R24, 4
   \   00000272   F411               BRNE    ??decode_dtmf_24
    169          		{
    170          			return '*';
   \   00000274   E20A               LDI     R16, 42
   \   00000276   C013               RJMP    ??decode_dtmf_12
    171          		}
    172          		else if ((low_freq == 3) && (high_freq == 5))
   \                     ??decode_dtmf_24:
   \   00000278   30A3               CPI     R26, 3
   \   0000027A   F421               BRNE    ??decode_dtmf_25
   \   0000027C   3085               CPI     R24, 5
   \   0000027E   F411               BRNE    ??decode_dtmf_25
    173          		{
    174          			return '0';
   \   00000280   E300               LDI     R16, 48
   \   00000282   C00D               RJMP    ??decode_dtmf_12
    175          		}
    176          		else if ((low_freq == 3) && (high_freq == 6))
   \                     ??decode_dtmf_25:
   \   00000284   30A3               CPI     R26, 3
   \   00000286   F421               BRNE    ??decode_dtmf_26
   \   00000288   3086               CPI     R24, 6
   \   0000028A   F411               BRNE    ??decode_dtmf_26
    177          		{
    178          			return '#';
   \   0000028C   E203               LDI     R16, 35
   \   0000028E   C007               RJMP    ??decode_dtmf_12
    179          		}
    180          		else if ((low_freq == 3) && (high_freq == 7))
   \                     ??decode_dtmf_26:
   \   00000290   30A3               CPI     R26, 3
   \   00000292   F421               BRNE    ??decode_dtmf_2
   \   00000294   3087               CPI     R24, 7
   \   00000296   F411               BRNE    ??decode_dtmf_2
    181          		{
    182          			return 'D';
   \   00000298   E404               LDI     R16, 68
   \   0000029A   C001               RJMP    ??decode_dtmf_12
    183          		}
    184          	}
    185          
    186          	return	0;
   \                     ??decode_dtmf_2:
   \   0000029C   E000               LDI     R16, 0
   \                     ??decode_dtmf_12:
   \   0000029E   E0E5               LDI     R30, 5
   \   000002A0   ....               RJMP    ?EPILOGUE_B5_L09
    187          }

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for g_sincos_len>`:
   \   00000000   32                 DB 50

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for g_cos_table>`:
   \   00000000   3A7E83B757D7       DB 126, 58, -73, -125, -41, 87, 121, 24, -99, -115, -6, 109, 106, -12
   \              18798D9D6DFA
   \              F46A        
   \   0000000E   A18B7A1ED152       DB -117, -95, 30, 122, 82, -47, -125, -68, 63, 126, 52, -78, -124, -35
   \              BC837E3FB234
   \              DD84        
   \   0000001C   775B99120090       DB 91, 119, 18, -103, -112, 0, 112, 103, -18, -119, -91, 36, 124, 78
   \              677089EE24A5
   \              4E7C        
   \   0000002A   82CB44C12F7D       DB -53, -126, -63, 68, 125, 47, -83, -122, 126, 45, -95, -111, 16, 123
   \              86AD2D7E91A1
   \              7B10        
   \   00000038   B847F2865D70       DB 71, -72, -122, -14, 112, 93, -46, -126, -43, 96, 110, -18, -123, -69
   \              82D260D5EE6E
   \              BB85        
   \   00000046   7A4A8F0C30A4       DB 74, 122, 12, -113, -92, 48, 126, 41, -97, -109, 20, 123, 68, -76
   \              297E939F7B14
   \              B444        
   \   00000054   F6875A7282CE       DB -121, -10, 114, 90, -50, -126, -39, 98, 108, -22, -124, -66, 77, 120
   \              62D9EA6CBE84
   \              784D        
   \   00000062   8D081D7EAF8F       DB 8, -115, 126, 29, -113, -81, 75, 116, -22, -126, -36, 109, 86, -70
   \              744B82EA6DDC
   \              BA56        
   \   00000070   0F8A2B7DA596       DB -118, 15, 125, 43, -106, -91, 63, 121, -8, -124, -49, 101, 96, -57
   \              793F84F865CF
   \              C760        
   \   0000007E   0186387B9B9F       DB -122, 1, 123, 56, -97, -101, 51, 124, 6, -121, -62, 92, 105, -44
   \              7C3387065CC2
   \              D469        
   \   0000008C   F383447794A9       DB -125, -13, 119, 68, -87, -108, 37, 126, 20, -116, 126, 12, -124, -35
   \              7E258C140C7E
   \              DD84        
   \   0000009A   3875B4955D5D       DB 117, 56, -107, -76, 93, 93, -76, -107, 56, 118, -34, -124, 11, 126
   \              95B4763884DE
   \              7E0B        
   \   000000A8   840C75DD9539       DB 12, -124, -35, 117, 57, -107, -77, 93, 94, -75, -108, 55, 118, -33
   \              5DB3B55E3794
   \              DF76        
   \   000000B6   0A840D7EDC84       DB -124, 10, 126, 13, -124, -36, 117, 57, -106, -77, 92, 94, -75, -108
   \              3975B3965E5C
   \              94B5        
   \   000000C4   763784DFD77E       DB 55, 118, -33, -124, 126, -41, -100, 105, 32, -126, 49, 94, -110, -23
   \              699C82205E31
   \              E992        
   \   000000D2   C77D72A8850F       DB 125, -57, -88, 114, 15, -123, 65, 81, -117, -6, 121, -72, -74, 120
   \              5141FA8BB879
   \              78B6        
   \   000000E0   8AFD434F0C85       DB -3, -118, 79, 67, -123, 12, 115, -86, -59, 124, -21, -111, 92, 51
   \              AA737CC591EB
   \              335C        
   \   000000EE   1E839E6A7ED5       DB -125, 30, 106, -98, -43, 126, -38, -101, 104, 35, -126, 47, 126, -63
   \              9BDA23682F82
   \              C17E        
   \   000000FC   7EC2C3BFBE7E       DB -62, 126, -65, -61, 126, -66, -59, 126, -68, -58, 126, -69, -56, 126
   \              7EC5C6BCBB7E
   \              7EC8        
   \   0000010A   C9BAB97E7ECA       DB -70, -55, 126, -71, -54, 126, -73, -52, 125, -74, -51, 125, -75, -49
   \              CCB7B67D7DCD
   \              CFB5        
   \   00000118   B37D7DD0D2B2       DB 125, -77, -48, 125, -78, -46, 125, -79, -45, 124, -80, -43, 124, -82
   \              B17D7CD3D5B0
   \              AE7C        
   \   00000126   7CD6D8ADAC7B       DB -42, 124, -83, -40, 123, -84, 126, -86, -9, 98, -125, 72, 27, -109
   \              AA7E62F74883
   \              931B        
   \   00000134   C87975D3278E       DB 121, -56, -45, 117, -114, 39, 61, -122, 106, -21, -76, 125, -95, 3
   \              863DEB6A7DB4
   \              03A1        
   \   00000142   825A0F527C9A       DB 90, -126, 82, 15, -102, 124, -67, -33, 111, -119, 51, 50, -119, 112
   \              DFBD896F3233
   \              7089        
   \   00000150   BEDE9A7C5110       DB -34, -66, 124, -102, 16, 81, -126, 91, 2, -94, 125, -77, -20, 105
   \              5B82A202B37D
   \              69EC        
   \   0000015E   967E14337AAB       DB 126, -106, 51, 20, -85, 122, -120, 79, -13, -58, 109, -126, 101, -44
   \              4F88C6F3826D
   \              D465        
   \   0000016C   5AE5758505B7       DB -27, 90, -123, 117, -73, 5, 64, -113, 125, -97, 37, 34, -95, 125
   \              8F409F7D2225
   \              7DA1        
   \   0000017A   438EBA028474       DB -114, 67, 2, -70, 116, -124, 92, -30, -41, 99, -126, 111, -61, -9
   \              E25C63D76F82
   \              F7C3        
   \   00000188   894CA97B3017       DB 76, -119, 123, -87, 23, 48, -104, 126
   \              7E98        

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for g_sin_table>`:
   \   00000000   7000EE67A589       DB 0, 112, 103, -18, -119, -91, 36, 124, 78, -52, -126, -63, 68, 125
   \              7C24CC4EC182
   \              7D44        
   \   0000000E   AD2FE286755F       DB 47, -83, -122, -30, 95, 117, 12, -106, -109, 6, 115, 99, -24, -121
   \              960C06936373
   \              87E8        
   \   0000001C   29A9497D82C6       DB -87, 41, 125, 73, -58, -126, -58, 73, 125, 41, -87, -121, -24, 99
   \              49C6297D87A9
   \              63E8        
   \   0000002A   06739693750C       DB 115, 6, -109, -106, 12, 117, 95, -30, 0, 118, 83, -59, -125, -29
   \              E25F7600C553
   \              E383        
   \   00000038   676883E155C7       DB 104, 103, -31, -125, -57, 85, 117, -2, -119, -82, 61, 125, 27, -105
   \              FE75AE897D3D
   \              971B        
   \   00000046   219A377D8CAA       DB -102, 33, 125, 55, -86, -116, 4, 119, 80, -62, -124, -26, 106, 101
   \              7704C250E684
   \              656A        
   \   00000054   82DD58CAFA74       DB -35, -126, -54, 88, 116, -6, -120, -79, 64, 124, 24, -107, -100, 37
   \              B1887C409518
   \              259C        
   \   00000062   347E7B009F38       DB 126, 52, 0, 123, 56, -97, -101, 50, 124, 7, -121, -63, 92, 105, -43
   \              329B077CC187
   \              695CD5      
   \   00000071   F283457793A9       DB -125, -14, 119, 69, -87, -109, 37, 126, 21, -116, -75, 82, 112, -30
   \              7E258C1552B5
   \              E270        
   \   0000007F   E48250718DB4       DB -126, -28, 113, 80, -76, -115, 23, 126, 35, -110, -86, 70, 118, -16
   \              7E17922346AA
   \              F076        
   \   0000008D   D6835B6A88C0       DB -125, -42, 106, 91, -64, -120, 9, 124, 49, 0, 125, 23, -121, -46
   \              7C090031177D
   \              D287        
   \   0000009B   4371AB9C6555       DB 113, 67, -100, -85, 85, 101, -66, -113, 45, 121, -23, -126, -1, 125
   \              8FBE792D82E9
   \              7DFF        
   \   000000A9   871870D29C43       DB 24, -121, -46, 112, 67, -100, -86, 84, 101, -65, -113, 45, 121, -22
   \              54AABF652D8F
   \              EA79        
   \   000000B7   FF82187DD187       DB -126, -1, 125, 24, -121, -47, 112, 68, -100, -86, 84, 101, -65, -113
   \              4470AA9C6554
   \              8FBF        
   \   000000C5   7A2C00EBB377       DB 44, 122, -21, 0, 119, -77, -70, 122, -9, -116, 84, 62, -124, 18, 112
   \              7ABA8CF73E54
   \              128470      
   \   000000D4   CAA6E57D6094       DB -90, -54, 125, -27, -108, 96, 46, -126, 35, 103, -102, -38, 126, -44
   \              822E6723DA9A
   \              D47E        
   \   000000E2   6B9E831D5C34       DB -98, 107, 29, -125, 52, 92, -111, -20, 124, -60, -86, 115, 11, -122
   \              EC91C47C73AA
   \              860B        
   \   000000F0   4F44FD8AB578       DB 68, 79, -118, -3, 120, -75, -72, 121, -6, -117, 0, 109, -110, 2, 108
   \              79B88BFA6D00
   \              02926C      
   \   000000FF   0392916B6A05       DB -110, 3, 107, -111, 5, 106, -112, 6, 106, -113, 8, 105, -113, 9, 104
   \              06908F6A6908
   \              098F68      
   \   0000010E   0B8E8D67660D       DB -114, 11, 103, -115, 13, 102, -115, 14, 101, -116, 16, 100, -117, 17
   \              0E8D8C656410
   \              118B        
   \   0000011C   8B636213148A       DB 99, -117, 19, 98, -118, 20, 97, -118, 22, 96, -119, 24, 95, -119, 25
   \              8A6160161889
   \              895F19      
   \   0000012B   005E825C124F       DB 94, 0, 92, -126, 79, 18, -104, 123, -64, -36, 113, -118, 48, 53
   \              7B98DCC08A71
   \              3530        
   \   00000139   6E88BBE29C7C       DB -120, 110, -30, -69, 124, -100, 12, 83, -126, 88, 6, -96, 125, -74
   \              530C5882A006
   \              B67D        
   \   00000147   6BE83B868D29       DB -24, 107, -122, 59, 41, -115, 116, -42, -58, 121, -107, 25, 74, -125
   \              D67479C61995
   \              834A        
   \   00000155   F9617EA8F5AC       DB 97, -7, -88, 126, -84, -11, 100, -124, 70, 0, 69, -115, 124, -93, 32
   \              846400468D45
   \              A37C20      
   \   00000164   9E27907D073E       DB 39, -98, 125, -112, 62, 7, -75, 118, -123, 88, -25, -46, 103, -126
   \              76B55885D2E7
   \              8267        
   \   00000172   C86C50F17988       DB 108, -56, -15, 80, -120, 121, -83, 18, 53, -107, 126, -105, 49, 22
   \              12AD9535977E
   \              1631        
   \   00000180   7AAA4D89C5F5       DB -86, 122, -119, 77, -11, -59, 110, -126, 100, -42, -29, 91, -124
   \              826ED6645BE3
   \              84          
   \   0000018D   B97403             DB 116, -71, 3
    188          

   Maximum stack usage in bytes:

     Function          CSTACK RSTACK
     --------          ------ ------
     decode_dtmf           5      2
       -> labs             5      2
       -> labs             5      2
       -> memset           5      2
       -> memset           5      2
     init_dtmf_decoder     0      2
       -> memset           0      2
       -> memset           0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     s_dtmf_p                          1
     s_dtmf_real                      32
     s_dtmf_image                     32
     g_sincos_len                      1
     g_cos_table                     400
     g_sin_table                     400
     init_dtmf_decoder                36
     decode_dtmf                     674
     ?<Initializer for g_sincos_len>
                                       1
     ?<Initializer for g_cos_table>  400
     ?<Initializer for g_sin_table>  400
      Others                          12

 
 710 bytes in segment CODE
  12 bytes in segment INITTAB
 801 bytes in segment NEAR_I
 801 bytes in segment NEAR_ID
  65 bytes in segment NEAR_Z
 
 1 511 bytes of CODE memory (+ 12 bytes shared)
   866 bytes of DATA memory

Errors: none
Warnings: none
