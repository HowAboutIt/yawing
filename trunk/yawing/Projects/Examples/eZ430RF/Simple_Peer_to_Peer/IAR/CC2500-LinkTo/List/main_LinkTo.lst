###############################################################################
#                                                                             #
#                                                       15/May/2009  07:33:48 #
# IAR C/C++ Compiler V4.20.1.20017/W32, Evaluation edition for MSP430         #
# Copyright 1996-2008 IAR Systems AB.                                         #
# Time limited license: 25 days left                                          #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  D:\workbench\yawing\Projects\Examples\Applications\main #
#                     _LinkTo.c                                               #
#    Command line  =  -f D:\workbench\yawing\Projects\Examples\eZ430RF\Simple #
#                     _Peer_to_Peer\IAR\Configuration\End_Device\smpl_config. #
#                     dat (-DNUM_CONNECTIONS=2 -DSIZE_INFRAME_Q=2             #
#                     -DSIZE_OUTFRAME_Q=2 "-DTHIS_DEVICE_ADDRESS={0x79,       #
#                     0x56, 0x34, 0x12}" -DEND_DEVICE) -f                     #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\Configuration\smpl_nwk_config.dat        #
#                     (-DMAX_HOPS=3 -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=9  #
#                     -DMAX_APP_PAYLOAD=10 -DDEFAULT_LINK_TOKEN=0x01020304    #
#                     -DDEFAULT_JOIN_TOKEN=0x05060708 -DxFREQUENCY_AGILITY    #
#                     -DxAPP_AUTO_ACK -DxEXTENDED_API -DxSMPL_SECURE          #
#                     -DxNVOBJECT_SUPPORT -DSW_TIMER)                         #
#                     D:\workbench\yawing\Projects\Examples\Applications\main #
#                     _LinkTo.c -D MRFI_CC2500 -lcN                           #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkTo\List\ -o                   #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkTo\Obj\ --require_prototypes  #
#                     --debug -D__MSP430F2274__ -e --double=32 -I             #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\..\..\..\..\..\Components\bsp\ -I        #
#                     D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\..\..\..\..\..\Components\bsp\drivers\   #
#                     -I D:\workbench\yawing\Projects\Examples\eZ430RF\Simple #
#                     _Peer_to_Peer\IAR\..\..\..\..\..\Components\bsp\boards\ #
#                     EZ430RF\ -I D:\workbench\yawing\Projects\Examples\eZ430 #
#                     RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\mr #
#                     fi\ -I D:\workbench\yawing\Projects\Examples\eZ430RF\Si #
#                     mple_Peer_to_Peer\IAR\..\..\..\..\..\Components\Simplic #
#                     iTI\nwk\ -I D:\workbench\yawing\Projects\Examples\eZ430 #
#                     RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\Si #
#                     mpliciTI\nwk_applications\ -I "C:\Program Files\IAR     #
#                     Systems\Embedded Workbench 5.3 Evaluation\430\INC\" -I  #
#                     "C:\Program Files\IAR Systems\Embedded Workbench 5.3    #
#                     Evaluation\430\INC\CLIB\" -Ohz                          #
#    List file     =  D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkTo\List\main_LinkTo.lst       #
#    Object file   =  D:\workbench\yawing\Projects\Examples\eZ430RF\Simple_Pe #
#                     er_to_Peer\IAR\CC2500-LinkTo\Obj\main_LinkTo.r43        #
#                                                                             #
#                                                                             #
###############################################################################

D:\workbench\yawing\Projects\Examples\Applications\main_LinkTo.c
      1          /*----------------------------------------------------------------------------
      2           *  Demo Application for SimpliciTI 
      3           * 
      4           *  L. Friedman 
      5           *  Texas Instruments, Inc.
      6           *---------------------------------------------------------------------------- */
      7          
      8          /********************************************************************************************
      9            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     12            the terms of a software license agreement between the user who downloaded the software,
     13            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     14            "License"). You may not use this Software unless you agree to abide by the terms of the
     15            License. The License limits your use, and you acknowledge, that the Software may not be
     16            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     18            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     19            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     20            perform, display or sell this Software and/or its documentation for any purpose.
     21          
     22            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS?  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     23            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     24            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     25            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     26            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     27            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     28            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     29            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     30          
     31            Should you have any questions regarding your right to use this Software,
     32            contact Texas Instruments Incorporated at www.TI.com.
     33          **************************************************************************************************/
     34          
     35          #include "bsp.h"
     36          #include "mrfi.h"
     37          #include "nwk_types.h"
     38          #include "nwk_api.h"
     39          #include "bsp_leds.h"
     40          #include "bsp_buttons.h"
     41          
     42          #include "app_remap_led.h"
     43          
     44          #define	GREEN	1
     45          #define RED		2
     46          #define	BSP_GREEN_LED_IS_ON	BSP_LED1_IS_ON
     47          #define	BSP_RED_LED_IS_ON	BSP_LED2_IS_ON
     48          #define	BSP_BUTTON 			BSP_BUTTON1
     49          
     50          //#define	I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE
     51          
     52          static void linkTo(void);
     53          
     54          void toggleLED(uint8_t);
     55          
     56          static uint8_t  sTxTid=0, sRxTid=0;
     57          static linkID_t sLinkID1 = 0;
     58          
     59          /* application Rx frame handler. */
     60          static uint8_t sRxCallback(linkID_t);
     61          
     62          #define SPIN_ABOUT_A_SECOND  NWK_DELAY(1000)
     63          
     64          void main (void)
     65          {
     66            BSP_Init();
     67          
     68            /* If an on-the-fly device address is generated it must be done before the
     69             * call to SMPL_Init(). If the address is set here the ROM value will not 
     70             * be used. If SMPL_Init() runs before this IOCTL is used the IOCTL call 
     71             * will not take effect. One shot only. The IOCTL call below is conformal. 
     72             */
     73          #ifdef I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE
     74            {
     75              addr_t lAddr;
     76          
     77              createRandomAddress(&lAddr);
     78              SMPL_Ioctl(IOCTL_OBJ_ADDR, IOCTL_ACT_SET, &lAddr);
     79            }
     80          #endif /* I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE */
     81          
     82            /* This call will fail because the join will fail since there is no Access Point 
     83             * in this scenario. But we don't care -- just use the default link token later. 
     84             * We supply a callback pointer to handle the message returned by the peer. 
     85             */
     86            SMPL_Init(sRxCallback);
     87          
     88            /* turn on Green LEDs. */
     89            if (!BSP_GREEN_LED_IS_ON())
     90            {
     91              toggleLED(GREEN);
     92            }
     93            
     94            /* turn off Red LEDs. */
     95            if (BSP_RED_LED_IS_ON())
     96            {
     97              toggleLED(RED);
     98            }
     99          
    100            /* wait for a button press... */
    101            do {
    102              if (BSP_BUTTON())
    103              {
    104                break;
    105              }
    106            } while (1);
    107            
    108            /* turn on Red LEDs. */
    109            if (!BSP_RED_LED_IS_ON())
    110            {
    111              toggleLED(RED);
    112            }
    113          
    114            /* never coming back... */
    115            linkTo();
    116          
    117            /* but in case we do... */
    118            while (1) ;
    119          }
    120          
    121          static void linkTo()
    122          {
    123            uint8_t  msg[2], delay = 0;
    124          
    125            while (SMPL_SUCCESS != SMPL_Link(&sLinkID1))
    126            {
    127              /* blink LEDs until we link successfully */
    128              //toggleLED(1);
    129              //toggleLED(2);
    130              SPIN_ABOUT_A_SECOND;
    131            }
    132          
    133            /* we're linked. turn off red LED. received messages will toggle the green LED. */
    134            if (BSP_RED_LED_IS_ON())
    135            {
    136              toggleLED(RED);
    137            }
    138          
    139            /* turn on RX. default is RX off. */
    140            SMPL_Ioctl( IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_RXON, 0);
    141          
    142            /* put LED to toggle in the message */
    143            msg[0] = 2;  /* toggle red */
    144            while (1)
    145            {
    146              SPIN_ABOUT_A_SECOND;
    147              if (delay > 0x00)
    148              {
    149                SPIN_ABOUT_A_SECOND;
    150              }
    151              if (delay > 0x01)
    152              {
    153                SPIN_ABOUT_A_SECOND;
    154              }
    155              if (delay > 0x02)
    156              {
    157                SPIN_ABOUT_A_SECOND;
    158              }
    159          
    160              /* delay longer and longer -- then start over */
    161              delay = (delay+1) & 0x03;
    162              /* put the sequence ID in the message */
    163              msg[1] = ++sTxTid;
    164              SMPL_Send(sLinkID1, msg, sizeof(msg));
    165            }
    166          }
    167          
    168          
    169          void toggleLED(uint8_t which)
    170          {
    171            if (1 == which)
    172            {
    173              BSP_TOGGLE_LED1();
    174            }
    175            else if (2 == which)
    176            {
    177              BSP_TOGGLE_LED2();
    178            }
    179            return;
    180          }
    181          
    182          /* handle received frames. */
    183          static uint8_t sRxCallback(linkID_t port)
    184          {
    185            uint8_t msg[2], len, tid;
    186          
    187            /* is the callback for the link ID we want to handle? */
    188            if (port == sLinkID1)
    189            {
    190              /* yes. go get the frame. we know this call will succeed. */
    191               if ((SMPL_SUCCESS == SMPL_Receive(sLinkID1, msg, &len)) && len)
    192               {
    193                 /* Check the application sequence number to detect
    194                  * late or missing frames... 
    195                  */
    196                 tid = *(msg+1);
    197                 if (tid)
    198                 {
    199                   if (tid > sRxTid)
    200                   {
    201                     /* we're good. toggle LED in the message */
    202                     toggleLED(*msg);
    203                     sRxTid = tid;
    204                   }
    205                 }
    206                 else
    207                 {
    208                   /* the wrap case... */
    209                   if (sRxTid)
    210                   {
    211                     /* we're good. toggle LED in the message */
    212                     toggleLED(*msg);
    213                     sRxTid = tid;
    214                   }
    215                 }
    216                 /* drop frame. we're done with it. */
    217                 return 1;
    218               }
    219            }
    220            /* keep frame for later handling. */
    221            return 0;
    222          }
    223          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     linkTo                  10
       ->   Indirect call    10
       -> SMPL_Link          10
       -> toggleLED          10
       -> SMPL_Ioctl         10
       ->   Indirect call    10
       ->   Indirect call    10
       ->   Indirect call    10
       ->   Indirect call    10
       -> SMPL_Send          10
     main                     2
       -> BSP_Init            2
       -> SMPL_Init           2
       -> toggleLED           2
       -> toggleLED           2
       -> toggleLED           2
       -> linkTo              2
     sRxCallback              6
       -> SMPL_Receive        6
       -> toggleLED           6
       -> toggleLED           6
     toggleLED                2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     P1IN              1
     P1OUT             1
     sTxTid            1
     sRxTid            1
     sLinkID1          1
     main             52
     ?Subroutine0     14
     linkTo          116
     toggleLED        20
     sRxCallback      88

 
 290 bytes in segment CODE
   2 bytes in segment DATA16_AN
   3 bytes in segment DATA16_Z
 
 290 bytes of CODE memory
   3 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
